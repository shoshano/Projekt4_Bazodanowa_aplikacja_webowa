@page "/details"
@inject Projekt4_Bazodanowa_aplikacja_webowa.Data.ApplicationDbContext DB
@using Projekt4_Bazodanowa_aplikacja_webowa
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore
@rendermode InteractiveServer

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h4>Movie</h4>
    <hr />
    @if (movie is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <div class="container">
            <div class="row">
                <!-- Image on the left side -->
                <div class="col-md-4">
                    <img src="@movie.FotoUrl" asp-append-version="true" class="img-fluid" />
                </div>
                <div class="col-md-8">
                    <dl class="row">
                        <dt class="col-sm-2">Title</dt>
                        <dd class="col-sm-10">@movie.Title</dd>
                        <dt class="col-sm-2">Description</dt>
                        <dd class="col-sm-10">@movie.Description</dd>
                        <dt class="col-sm-2">RelaseDate</dt>
                            <dd class="col-sm-10">@movie.RelaseDate.ToLongDateString()</dd>
                        <dt class="col-sm-2">Rating</dt>
                        <dd class="col-sm-10">@strRate</dd>
                    </dl>
                    <div class="mb-3">
                       
                            <br />
                            <InputNumber id="rating" @bind-Value="@rating" min="0" max="5" class="form-control" style="width: 7em" step = "0.1"/>
                            <br />
                            <button class="btn btn-primary" @onclick="save">Rate</button>

                    </div>
                    <div>
                        <a class="btn btn-warning" href="@($"/edit?id={movie.Id}")">Edit</a>
                        <a class="btn btn-info" href="@($"/")">Back to List</a>
                    </div>
                </div>
            </div>
        </div>
        <!--<img src="@movie.FotoUrl" asp-append-version="true" width=300px/>-->
        
        
    }
</div>

@code {
    public Movie? movie;
    float? rating = 3;
    float? rate;
    string? strRate;

    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Movie? Movie { get; set; }



    protected override async Task OnInitializedAsync()
    {
        movie = await DB.Movie.FirstOrDefaultAsync(m => m.Id == Id);

        if (movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        rate = movie.Rating / movie.rateCount;
       strRate = Convert.ToString(String.Format("{0:0.00}", rate));

    }

    private void save()
    {
        if(movie.Rating == null)
        {
            movie.Rating = 0;
            movie.rateCount = 0;
        }
        movie.Rating = movie.Rating + rating;
        movie.rateCount += 1;
        rate = movie.Rating / movie.rateCount;
        strRate = Convert.ToString(String.Format("{0:0.00}", rate));
        UpdateMovie();
    }
    public async Task UpdateMovie()
    {
        Movie = movie;

        DB.Attach(Movie!).State = EntityState.Modified;

        try
        {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MovieExists(Movie!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }
    }

    bool MovieExists(int id)
    {
        return DB.Movie.Any(e => e.Id == id);
    }

}
