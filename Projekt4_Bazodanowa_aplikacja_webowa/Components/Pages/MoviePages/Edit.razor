@page "/edit"
@inject Projekt4_Bazodanowa_aplikacja_webowa.Data.ApplicationDbContext DB
@using Projekt4_Bazodanowa_aplikacja_webowa
@inject NavigationManager NavigationManager
@using Microsoft.EntityFrameworkCore

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h4>Movie</h4>
<hr />
@if (Movie is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Movie" OnValidSubmit="UpdateMovie" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary />
                <input type="hidden" name="Movie.Id" value="@Movie.Id" />
                <div class="mb-3">
                    <label for="title" class="form-label">Title:</label>
                    <InputText id="title" @bind-Value="Movie.Title" class="form-control" />
                    <ValidationMessage For="() => Movie.Title" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="description" class="form-label">Description:</label>
                    <InputText id="description" @bind-Value="Movie.Description" class="form-control" />
                    <ValidationMessage For="() => Movie.Description" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="relasedate" class="form-label">RelaseDate:</label>
                    <InputDate id="relasedate" @bind-Value="Movie.RelaseDate" class="form-control" />
                    <ValidationMessage For="() => Movie.RelaseDate" class="text-danger" />
                </div>
                
                <div class="mb-3">
                    <label for="fotourl" class="form-label">FotoURL:</label> 
                    <InputText id="fotourl" @bind-Value="Movie.FotoUrl" class="form-control" /> 
                    <ValidationMessage For="() => Movie.FotoUrl" class="text-danger" /> 
                </div>

                <div hidden>
                    <label for="rating" class="form-label">Rating:</label>
                    <InputNumber id="rating" @bind-Value="@Movie.Rating" class="form-control" />
                    <ValidationMessage For="() => Movie.Rating" class="text-danger" />

                </div>
                <div hidden>
                    <label for="ratingC" class="form-label">Rate Number:</label>
                    <InputNumber id="ratingC" @bind-Value="@Movie.rateCount" class="form-control" />
                    <ValidationMessage For="() => Movie.rateCount" class="text-danger" />

                </div>
                <div> 
                    <button type="submit" class="btn btn-primary">Save</button> 
                    <a class="btn btn-info" href="/">Back to List</a>
                </div>
            </EditForm>
        </div>
    </div>
}


@code {
    public Movie? movietemp;
    [SupplyParameterFromQuery]
    public int Id { get; set; }

    [SupplyParameterFromForm]
    public Movie? Movie { get; set; }

    protected override async Task OnInitializedAsync()
    {
        Movie ??= await DB.Movie.FirstOrDefaultAsync(m => m.Id == Id);

        if (Movie is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
        movietemp = Movie;
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more details, see https://aka.ms/RazorPagesCRUD.
    public async Task UpdateMovie()
    {
        Movie.Rating = movietemp.Rating;
        Movie.rateCount = movietemp.rateCount;
        DB.Attach(Movie!).State = EntityState.Modified;

        try
           {
            await DB.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!MovieExists(Movie!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/");
    }

    bool MovieExists(int id)
    {
        return DB.Movie.Any(e => e.Id == id);
    }
}
